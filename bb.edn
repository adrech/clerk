{:min-bb-version "0.7.6"
 :paths ["bb"]
 :deps {io.github.nextjournal/dejavu
        {:git/sha "3c4cf5e4dda3648e0d4c575a3433d19c511dd3e5"}
        babashka/nrepl-client
        #_{:local/root "../nrepl-client"}
        {:git/url "https://github.com/babashka/nrepl-client"
         :git/sha "c83b15906d224b67a67951343b05623c4c00cdcf"}

        io.github.babashka/sci.nrepl
        #_{:local/root "../sci.nrepl"}
        {:git/sha "8998f2a4fd25ff02474d7298253e91f059f482b2"}}
 :tasks {:requires ([clojure.edn :as edn]
                    [clojure.edn :as edn]
                    [clojure.string :as str]
                    [babashka.deps :as deps]
                    [babashka.fs :as fs]
                    [babashka.process :as p])
         :init (do
                 (defn viewer-css-path []
                   (let [cp (str/trim (with-out-str (deps/clojure ["-A:sci" "-Spath"])))]
                     (str/trim (:out (shell {:out :string} (str "bb -cp " cp " -e '(println (.getPath (clojure.java.io/resource \"css/viewer.css\")))'"))))))

                 (defn latest-sha []
                   (str/trim (:out (p/sh "git rev-parse HEAD")))))

         print-viewer-css {:task (println (viewer-css-path))}
         copy-viewer-css {:task (fs/copy (viewer-css-path) "resources/stylesheets/viewer.css" #{:replace-existing})}

         yarn-install {:doc "Installs and updates npm dependencies"
                       :task (shell "yarn install")}

         watch:cljs {:doc "Starts shadow-cljs server"
                     :task (clojure "-M:test:sci:demo:dev watch browser")
                     :depends [yarn-install]}

         build:js {:doc "Builds JS"
                   :depends [yarn-install]
                   :task (clojure "-M:sci:demo:dev release browser")}

         write-hash {:doc "Write viewer resource hash to resources. Intended to be used in a pre-commit hook."
                     :task viewer-resources-hashing/write-viewer-resource-hash}

         build+upload-viewer-resources {:doc "Refreshes assets stored on CDN (google storage)"
                                        :task viewer-resources-hashing/build+upload-viewer-resources}

         release:js {:doc "Uploads the js release and updates the sha reference."
                     :task (clojure "-T:build upload-to-cas :resource viewer.js")
                     :depends [build:js]}

         build:static-app {:doc "Builds a static app with default notebooks"
                           :depends [release:js]
                           :task (clojure "-X:demo nextjournal.clerk/build-static-app!")}

         test:static-app {:doc "Run UI tests for current SHA. Provide SHA as command line arg."
                          :task (do
                                  (shell {:dir "ui_tests"} "yarn install")
                                  (apply shell {:dir "ui_tests"}
                                         "yarn nbb -m playwright-tests"
                                         (or *command-line-args* [(latest-sha)])))}

         release:jar {:doc "Builds the jar"
                      :task (let [rev-count (-> (p/process ["git" "rev-list" "HEAD" "--count"] {:out :string}) p/check :out str/trim Integer/parseInt)
                                  version (format "0.6.%d" (inc rev-count))]
                              (spit (doto (fs/file "resources/META-INF/nextjournal/clerk/meta.edn")
                                      (-> fs/parent fs/create-dirs)) {:version version})
                              (clojure "-T:build jar"))}

         deploy {:doc "Deploys the jar to clojars"
                 :task (clojure "-T:build deploy")}

         tag {:doc "Tags release and pushes tag to Github."
              :task (let [version (-> (slurp "resources/META-INF/nextjournal/clerk/meta.edn")
                                      edn/read-string
                                      :version)
                          tag (str "v" version)]
                      (shell "git tag" tag)
                      (shell "git push origin" tag))}

         install-git-hooks {:doc "Install git hooks"
                            :task (fs/copy "dev/pre-commit" ".git/hooks" {:replace-existing true})}

         browser-nrepl {:doc "Start browser nREPL"
                        :requires ([sci.nrepl.browser-proxy :as bp])
                        :task (do (bp/start-browser-nrepl! {:port 1339})
                                  (println "Started browser nREPL on port 1339")
                                  (deref (promise)))}

         -dev {:depends [install-git-hooks watch:cljs copy-viewer-css browser-nrepl]}
         dev {:doc "Start app in dev mode, compiles cljs and css"
              :task (run '-dev {:parallel true})}}}
